{"version":3,"file":"static/js/148.970e468e.chunk.js","mappings":"uTASe,SAASA,IACtB,IACMC,GAAWC,EAAAA,EAAAA,MACjB,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA4CJ,EAAAA,EAAAA,eAASK,GAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACMC,EAAe,CACnBC,SAAU,eACVC,UAAW,IACXC,cAAc,EACdC,WAAW,EACXC,MAAO,SAGTC,EAAAA,EAAAA,YAAS,iBAAC,8EACHC,aAAaC,QAAQC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,0BACpCpB,EAAS,UAFH,2CAGP,IAEH,IAAMqB,EAAiB,mCAAG,gGACDd,IAAnBC,EADoB,gBAEtBc,EAAAA,GAAAA,MAAY,0BAA2BZ,GAFjB,uCAIHa,KAAKC,MACtBP,aAAaC,QAAQC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,0BALb,cAIhBK,EAJgB,gBAQCC,IAAAA,KAAA,UAAcC,EAAAA,GAAd,YAAgCF,EAAKG,KAAO,CACjEC,MAAO1B,EAAQK,KATK,iBAQdsB,EARc,EAQdA,MAICC,OACPN,EAAKO,kBAAmB,EACxBP,EAAKQ,YAAcH,EAAKD,MACxBZ,aAAaiB,QACXf,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,wBACZG,KAAKY,UAAUV,IAEjBzB,EAAS,MAETsB,EAAAA,GAAAA,MAAY,0CAA2CZ,GArBnC,4CAAH,qDAsCvB,OAZAM,EAAAA,EAAAA,YAAS,iBAAC,0FACFc,EAAO,GACJM,EAAI,EAFL,YAEQA,EAAI,GAFZ,iCAGcV,IAAAA,IAAA,UA/Cf,sCA+Ce,YACRW,KAAKC,MAAsB,IAAhBD,KAAKE,YAJtB,OAGAV,EAHA,OAMAW,EAAS,IAAIC,EAAAA,GAAOZ,EAAMC,MAChCA,EAAKY,KAAKF,EAAOG,SAAS,WAPpB,OAEeP,IAFf,uBASRhC,EAAW0B,GACXxB,GAAa,GAVL,4CAWP,KAED,8BACGD,GACC,SAACuC,EAAD,WACE,gBAAKC,IAAKC,EAAQC,IAAI,SAASC,UAAU,cAG3C,UAACJ,EAAD,YACE,gBAAKI,UAAU,kBAAf,UACE,wBAAI,8CAEN,gBAAKA,UAAU,UAAf,SACG7C,EAAQ8C,KAAI,SAACC,EAAQC,GACpB,OACE,gBACEH,UAAS,iBACPxC,IAAmB2C,EAAQ,WAAa,IAF5C,UAKE,gBACEN,IAAG,oCAA+BK,GAClCH,IAAI,SAEJK,QAAS,kBAAM3C,EAAkB0C,KAD5BD,WAOf,mBAAQE,QAAS/B,EAAmB2B,UAAU,aAA9C,SAA2D,4BAG3D,SAAC,KAAD,SAOV,IAAMJ,EAAYS,EAAAA,GAAAA,IAAH,6hC,8NCzGR,IAAMC,EAAO,wBACPC,EAAU,UAAMD,EAAN,mBACVE,EAAa,UAAMF,EAAN,sBACbG,EAAW,UAAMH,EAAN,oBACXI,EAAa,UAAMJ,EAAN,sBACbK,EAAgB,UAAML,EAAN,wBAChBM,EAAmB,UAAMN,EAAN,wBACnB3B,EAAc,UAAM2B,EAAN,wB","sources":["components/SetAvatar.jsx","utils/APIRoutes.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport { Buffer } from \"buffer\";\nimport loader from \"../assets/loader.gif\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport { setAvatarRoute } from \"../utils/APIRoutes\";\nexport default function SetAvatar() {\n  const api = `https://api.multiavatar.com/4645646`;\n  const navigate = useNavigate();\n  const [avatars, setAvatars] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedAvatar, setSelectedAvatar] = useState(undefined);\n  const toastOptions = {\n    position: \"bottom-right\",\n    autoClose: 8000,\n    pauseOnHover: true,\n    draggable: true,\n    theme: \"dark\",\n  };\n\n  useEffect(async () => {\n    if (!localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY))\n      navigate(\"/login\");\n  }, []);\n\n  const setProfilePicture = async () => {\n    if (selectedAvatar === undefined) {\n      toast.error(\"Please select an avatar\", toastOptions);\n    } else {\n      const user = await JSON.parse(\n        localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)\n      );\n\n      const { data } = await axios.post(`${setAvatarRoute}/${user._id}`, {\n        image: avatars[selectedAvatar],\n      });\n\n      if (data.isSet) {\n        user.isAvatarImageSet = true;\n        user.avatarImage = data.image;\n        localStorage.setItem(\n          process.env.REACT_APP_LOCALHOST_KEY,\n          JSON.stringify(user)\n        );\n        navigate(\"/\");\n      } else {\n        toast.error(\"Error setting avatar. Please try again.\", toastOptions);\n      }\n    }\n  };\n\n  useEffect(async () => {\n    const data = [];\n    for (let i = 0; i < 5; i++) {\n      const image = await axios.get(\n        `${api}/${Math.round(Math.random() * 1000)}`\n      );\n      const buffer = new Buffer(image.data);\n      data.push(buffer.toString(\"base64\"));\n    }\n    setAvatars(data);\n    setIsLoading(false);\n  }, []);\n  return (\n    <>\n      {isLoading ? (\n        <Container>\n          <img src={loader} alt=\"loader\" className=\"loader\" />\n        </Container>\n      ) : (\n        <Container>\n          <div className=\"title-container\">\n            <h1>Pick an Avatar as your profile picture</h1>\n          </div>\n          <div className=\"avatars\">\n            {avatars.map((avatar, index) => {\n              return (\n                <div\n                  className={`avatar ${\n                    selectedAvatar === index ? \"selected\" : \"\"\n                  }`}\n                >\n                  <img\n                    src={`data:image/svg+xml;base64,${avatar}`}\n                    alt=\"avatar\"\n                    key={avatar}\n                    onClick={() => setSelectedAvatar(index)}\n                  />\n                </div>\n              );\n            })}\n          </div>\n          <button onClick={setProfilePicture} className=\"submit-btn\">\n            Set as Profile Picture\n          </button>\n          <ToastContainer />\n        </Container>\n      )}\n    </>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  gap: 3rem;\n  background-color: #131324;\n  height: 100vh;\n  width: 100vw;\n\n  .loader {\n    max-inline-size: 100%;\n  }\n\n  .title-container {\n    h1 {\n      color: white;\n    }\n  }\n  .avatars {\n    display: flex;\n    gap: 2rem;\n\n    .avatar {\n      border: 0.4rem solid transparent;\n      padding: 0.4rem;\n      border-radius: 5rem;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      transition: 0.5s ease-in-out;\n      img {\n        height: 6rem;\n        transition: 0.5s ease-in-out;\n      }\n    }\n    .selected {\n      border: 0.4rem solid #4e0eff;\n    }\n  }\n  .submit-btn {\n    background-color: #4e0eff;\n    color: white;\n    padding: 1rem 2rem;\n    border: none;\n    font-weight: bold;\n    cursor: pointer;\n    border-radius: 0.4rem;\n    font-size: 1rem;\n    text-transform: uppercase;\n    &:hover {\n      background-color: #4e0eff;\n    }\n  }\n`;\n","export const host = \"http://localhost:5000\";\nexport const loginRoute = `${host}/api/auth/login`;\nexport const registerRoute = `${host}/api/auth/register`;\nexport const logoutRoute = `${host}/api/auth/logout`;\nexport const allUsersRoute = `${host}/api/auth/allusers`;\nexport const sendMessageRoute = `${host}/api/messages/addmsg`;\nexport const recieveMessageRoute = `${host}/api/messages/getmsg`;\nexport const setAvatarRoute = `${host}/api/auth/setavatar`;\n"],"names":["SetAvatar","navigate","useNavigate","useState","avatars","setAvatars","isLoading","setIsLoading","undefined","selectedAvatar","setSelectedAvatar","toastOptions","position","autoClose","pauseOnHover","draggable","theme","useEffect","localStorage","getItem","process","REACT_APP_LOCALHOST_KEY","setProfilePicture","toast","JSON","parse","user","axios","setAvatarRoute","_id","image","data","isSet","isAvatarImageSet","avatarImage","setItem","stringify","i","Math","round","random","buffer","Buffer","push","toString","Container","src","loader","alt","className","map","avatar","index","onClick","styled","host","loginRoute","registerRoute","logoutRoute","allUsersRoute","sendMessageRoute","recieveMessageRoute"],"sourceRoot":""}